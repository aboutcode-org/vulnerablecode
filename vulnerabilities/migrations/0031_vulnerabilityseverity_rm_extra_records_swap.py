from django.db import migrations
from vulnerabilities.severity_systems import CVSSV2_VECTOR, CVSSV31_VECTOR, CVSSV3, CVSSV2, CVSSV31, CVSSV3_VECTOR


def remove_extra_rows(apps, schema_editor):
    VulnerabilitySeverity = apps.get_model('vulnerabilities', 'VulnerabilitySeverity')
    duplicates = (
        VulnerabilitySeverity.objects
        .filter(scoring_system__in=["cvssv2_vector", "cvssv3_vector", "cvssv3.1_vector"])
    )

    for duplicate in duplicates:
        (
            VulnerabilitySeverity.objects
            .filter(reference_id=duplicate.reference_id,
                    scoring_system__in=["cvssv2", "cvssv3", "cvssv3.1"],
                    value=duplicate.scoring_elements)
            .delete()
        )


def swap_scoring_elements_with_value(apps, schema_editor):
    VulnerabilitySeverity = apps.get_model('vulnerabilities', 'VulnerabilitySeverity')
    for vuln_severity in VulnerabilitySeverity.objects.all():

        cvss_mapper = {
            CVSSV2_VECTOR.identifier: CVSSV2.identifier,
            CVSSV3_VECTOR.identifier: CVSSV3.identifier,
            CVSSV31_VECTOR.identifier: CVSSV31.identifier,
        }

        if vuln_severity.scoring_system in [CVSSV2_VECTOR.identifier,
                                            CVSSV3_VECTOR.identifier,
                                            CVSSV31_VECTOR.identifier]:

            vuln_severity.scoring_system = cvss_mapper[vuln_severity.scoring_system]
            temp = vuln_severity.scoring_elements  # value
            vuln_severity.scoring_elements = vuln_severity.value
            vuln_severity.value = temp
            vuln_severity.save()


class Migration(migrations.Migration):
    dependencies = [
        ('vulnerabilities', '0030_vulnerabilityserverity_compute_score'),
    ]

    operations = [
        migrations.RunPython(remove_extra_rows, migrations.RunPython.noop),
        migrations.RunPython(swap_scoring_elements_with_value, migrations.RunPython.noop),
    ]
