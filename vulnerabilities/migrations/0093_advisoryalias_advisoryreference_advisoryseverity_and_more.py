# Generated by Django 4.2.20 on 2025-05-28 13:31

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ("vulnerabilities", "0092_pipelineschedule_pipelinerun"),
    ]

    operations = [
        migrations.CreateModel(
            name="AdvisoryAlias",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "alias",
                    models.CharField(
                        help_text="An alias is a unique vulnerability identifier in some database, such as CVE-2020-2233",
                        max_length=50,
                        unique=True,
                    ),
                ),
            ],
            options={
                "ordering": ["alias"],
            },
        ),
        migrations.CreateModel(
            name="AdvisoryReference",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "url",
                    models.URLField(
                        help_text="URL to the vulnerability reference", max_length=1024, unique=True
                    ),
                ),
                (
                    "reference_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("advisory", "Advisory"),
                            ("exploit", "Exploit"),
                            ("mailing_list", "Mailing List"),
                            ("bug", "Bug"),
                            ("other", "Other"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "reference_id",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="An optional reference ID, such as DSA-4465-1 when available",
                        max_length=500,
                    ),
                ),
            ],
            options={
                "ordering": ["reference_id", "url", "reference_type"],
            },
        ),
        migrations.CreateModel(
            name="AdvisorySeverity",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "url",
                    models.URLField(
                        db_index=True,
                        help_text="URL to the vulnerability severity",
                        max_length=1024,
                        null=True,
                    ),
                ),
                (
                    "scoring_system",
                    models.CharField(
                        choices=[
                            ("cvssv2", "CVSSv2 Base Score"),
                            ("cvssv3", "CVSSv3 Base Score"),
                            ("cvssv3.1", "CVSSv3.1 Base Score"),
                            ("cvssv4", "CVSSv4 Base Score"),
                            ("rhbs", "RedHat Bugzilla severity"),
                            ("rhas", "RedHat Aggregate severity"),
                            ("archlinux", "Archlinux Vulnerability Group Severity"),
                            ("cvssv3.1_qr", "CVSSv3.1 Qualitative Severity Rating"),
                            ("generic_textual", "Generic textual severity rating"),
                            ("apache_httpd", "Apache Httpd Severity"),
                            ("apache_tomcat", "Apache Tomcat Severity"),
                            ("epss", "Exploit Prediction Scoring System"),
                            ("ssvc", "Stakeholder-Specific Vulnerability Categorization"),
                        ],
                        help_text="Identifier for the scoring system used. Available choices are: cvssv2: CVSSv2 Base Score,\ncvssv3: CVSSv3 Base Score,\ncvssv3.1: CVSSv3.1 Base Score,\ncvssv4: CVSSv4 Base Score,\nrhbs: RedHat Bugzilla severity,\nrhas: RedHat Aggregate severity,\narchlinux: Archlinux Vulnerability Group Severity,\ncvssv3.1_qr: CVSSv3.1 Qualitative Severity Rating,\ngeneric_textual: Generic textual severity rating,\napache_httpd: Apache Httpd Severity,\napache_tomcat: Apache Tomcat Severity,\nepss: Exploit Prediction Scoring System,\nssvc: Stakeholder-Specific Vulnerability Categorization ",
                        max_length=50,
                    ),
                ),
                (
                    "value",
                    models.CharField(help_text="Example: 9.0, Important, High", max_length=50),
                ),
                (
                    "scoring_elements",
                    models.CharField(
                        help_text="Supporting scoring elements used to compute the score values. For example a CVSS vector string as used to compute a CVSS score.",
                        max_length=150,
                        null=True,
                    ),
                ),
                (
                    "published_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="UTC Date of publication of the vulnerability severity",
                        null=True,
                    ),
                ),
            ],
            options={
                "ordering": ["url", "scoring_system", "value"],
            },
        ),
        migrations.CreateModel(
            name="AdvisoryWeakness",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("cwe_id", models.IntegerField(help_text="CWE id")),
            ],
        ),
        migrations.CreateModel(
            name="PackageV2",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        blank=True,
                        help_text="A short code to identify the type of this package. For example: gem for a Rubygem, docker for a container, pypi for a Python Wheel or Egg, maven for a Maven Jar, deb for a Debian package, etc.",
                        max_length=16,
                    ),
                ),
                (
                    "namespace",
                    models.CharField(
                        blank=True,
                        help_text="Package name prefix, such as Maven groupid, Docker image owner, GitHub user or organization, etc.",
                        max_length=255,
                    ),
                ),
                (
                    "name",
                    models.CharField(blank=True, help_text="Name of the package.", max_length=100),
                ),
                (
                    "version",
                    models.CharField(
                        blank=True, help_text="Version of the package.", max_length=100
                    ),
                ),
                (
                    "qualifiers",
                    models.CharField(
                        blank=True,
                        help_text="Extra qualifying data for a package such as the name of an OS, architecture, distro, etc.",
                        max_length=1024,
                    ),
                ),
                (
                    "subpath",
                    models.CharField(
                        blank=True,
                        help_text="Extra subpath within a package, relative to the package root.",
                        max_length=200,
                    ),
                ),
                (
                    "package_url",
                    models.CharField(
                        db_index=True,
                        help_text="The Package URL for this package.",
                        max_length=1000,
                    ),
                ),
                (
                    "plain_package_url",
                    models.CharField(
                        db_index=True,
                        help_text="The Package URL for this package without qualifiers and subpath.",
                        max_length=1000,
                    ),
                ),
                (
                    "is_ghost",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="True if the package does not exist in the upstream package manager or its repository.",
                    ),
                ),
                (
                    "risk_score",
                    models.DecimalField(
                        decimal_places=1,
                        help_text="Risk score between 0.00 and 10.00, where higher values indicate greater vulnerability risk for the package.",
                        max_digits=3,
                        null=True,
                    ),
                ),
                (
                    "version_rank",
                    models.IntegerField(
                        db_index=True,
                        default=0,
                        help_text="Rank of the version to support ordering by version. Rank zero means the rank has not been defined yet",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AlterField(
            model_name="pipelineschedule",
            name="is_active",
            field=models.BooleanField(
                db_index=True,
                default=True,
                help_text="When set to True, this Pipeline is active. When set to False, this Pipeline is inactive and not run.",
                null=True,
            ),
        ),
        migrations.CreateModel(
            name="AdvisoryV2",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "advisory_id",
                    models.CharField(
                        help_text="An advisory is a unique vulnerability identifier in some database, such as PYSEC-2020-2233",
                        max_length=50,
                    ),
                ),
                (
                    "unique_content_id",
                    models.CharField(
                        help_text="A 64 character unique identifier for the content of the advisory since we use sha256 as hex",
                        max_length=64,
                        unique=True,
                    ),
                ),
                ("summary", models.TextField(blank=True)),
                (
                    "date_published",
                    models.DateTimeField(
                        blank=True, help_text="UTC Date of publication of the advisory", null=True
                    ),
                ),
                (
                    "date_collected",
                    models.DateTimeField(help_text="UTC Date on which the advisory was collected"),
                ),
                (
                    "date_imported",
                    models.DateTimeField(
                        blank=True,
                        help_text="UTC Date on which the advisory was imported",
                        null=True,
                    ),
                ),
                (
                    "datasource_ID",
                    models.CharField(
                        help_text="Fully qualified name of the importer prefixed with themodule name importing the advisory. Eg:nginx_importer_v2",
                        max_length=100,
                    ),
                ),
                ("url", models.URLField(help_text="Link to the advisory on the upstream website")),
                (
                    "status",
                    models.IntegerField(
                        choices=[(1, "Published"), (2, "Disputed"), (3, "Invalid")], default=1
                    ),
                ),
                (
                    "exploitability",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        help_text="Exploitability indicates the likelihood that a vulnerability in a software package could be used by malicious actors to compromise systems, applications, or networks. This metric is determined automatically based on the discovery of known exploits.",
                        max_digits=2,
                        null=True,
                    ),
                ),
                (
                    "weighted_severity",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        help_text="Weighted severity is the highest value calculated by multiplying each severity by its corresponding weight, divided by 10.",
                        max_digits=3,
                        null=True,
                    ),
                ),
                (
                    "affecting_packages",
                    models.ManyToManyField(
                        help_text="A list of packages that are affected by this advisory.",
                        related_name="affected_by_advisories",
                        to="vulnerabilities.packagev2",
                    ),
                ),
                (
                    "aliases",
                    models.ManyToManyField(
                        help_text="A list of serializable Alias objects",
                        related_name="advisories",
                        to="vulnerabilities.advisoryalias",
                    ),
                ),
                (
                    "fixed_by_packages",
                    models.ManyToManyField(
                        help_text="A list of packages that are reported by this advisory.",
                        related_name="fixing_advisories",
                        to="vulnerabilities.packagev2",
                    ),
                ),
                (
                    "references",
                    models.ManyToManyField(
                        help_text="A list of serializable Reference objects",
                        related_name="advisories",
                        to="vulnerabilities.advisoryreference",
                    ),
                ),
                (
                    "severities",
                    models.ManyToManyField(
                        help_text="A list of vulnerability severities associated with this advisory.",
                        related_name="advisories",
                        to="vulnerabilities.advisoryseverity",
                    ),
                ),
                (
                    "weaknesses",
                    models.ManyToManyField(
                        help_text="A list of software weaknesses associated with this advisory.",
                        related_name="advisories",
                        to="vulnerabilities.advisoryweakness",
                    ),
                ),
            ],
            options={
                "ordering": ["date_published", "unique_content_id"],
            },
        ),
        migrations.CreateModel(
            name="AdvisoryExploit",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "date_added",
                    models.DateField(
                        blank=True,
                        help_text="The date the vulnerability was added to an exploit catalog.",
                        null=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Description of the vulnerability in an exploit catalog, often a refinement of the original CVE description",
                        null=True,
                    ),
                ),
                (
                    "required_action",
                    models.TextField(
                        blank=True,
                        help_text="The required action to address the vulnerability, typically to apply vendor updates or apply vendor mitigations or to discontinue use.",
                        null=True,
                    ),
                ),
                (
                    "due_date",
                    models.DateField(
                        blank=True,
                        help_text="The date the required action is due, which applies to all USA federal civilian executive branch (FCEB) agencies, but all organizations are strongly encouraged to execute the required action",
                        null=True,
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Additional notes and resources about the vulnerability, often a URL to vendor instructions.",
                        null=True,
                    ),
                ),
                (
                    "known_ransomware_campaign_use",
                    models.BooleanField(
                        default=False,
                        help_text="Known' if this vulnerability is known to have been leveraged as part of a ransomware campaign; \n        or 'Unknown' if there is no confirmation that the vulnerability has been utilized for ransomware.",
                    ),
                ),
                (
                    "source_date_published",
                    models.DateField(
                        blank=True,
                        help_text="The date that the exploit was published or disclosed.",
                        null=True,
                    ),
                ),
                (
                    "exploit_type",
                    models.TextField(
                        blank=True,
                        help_text="The type of the exploit as provided by the original upstream data source.",
                        null=True,
                    ),
                ),
                (
                    "platform",
                    models.TextField(
                        blank=True,
                        help_text="The platform associated with the exploit as provided by the original upstream data source.",
                        null=True,
                    ),
                ),
                (
                    "source_date_updated",
                    models.DateField(
                        blank=True,
                        help_text="The date the exploit was updated in the original upstream data source.",
                        null=True,
                    ),
                ),
                (
                    "data_source",
                    models.TextField(
                        blank=True,
                        help_text="The source of the exploit information, such as CISA KEV, exploitdb, metaspoit, or others.",
                        null=True,
                    ),
                ),
                (
                    "source_url",
                    models.URLField(
                        blank=True,
                        help_text="The URL to the exploit as provided in the original upstream data source.",
                        null=True,
                    ),
                ),
                (
                    "advisory",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="exploits",
                        to="vulnerabilities.advisoryv2",
                    ),
                ),
            ],
        ),
    ]
