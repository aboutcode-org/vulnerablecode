import csv
import io
import logging

import requests

from vulnerabilities.models import Alias
from vulnerabilities.models import Exploit
from vulnerabilities.models import VulnerabilityReference
from vulnerabilities.models import VulnerabilityRelatedReference
from vulnerabilities.pipelines import VulnerableCodePipeline

logger = logging.getLogger(__name__)


class ExploitDBImproverPipeline(VulnerableCodePipeline):
    """
    ExploitDB Improver Pipeline: Fetch ExploitDB data, iterate over it to find the vulnerability with
    the specified alias, and create or update the ref and ref-type accordingly.
    """

    exploit_data = None

    license_expression = "GPL-2.0"

    @classmethod
    def steps(cls):
        return (
            cls.fetch_exploits,
            cls.add_exploit,
        )

    def fetch_exploits(self):
        exploit_db_url = (
            "https://gitlab.com/exploit-database/exploitdb/-/raw/main/files_exploits.csv"
        )
        response = requests.get(exploit_db_url)
        self.exploit_data = io.StringIO(response.text)

    def add_exploit(self):
        csvreader = csv.reader(self.exploit_data)

        header = next(csvreader)
        for row in csvreader:

            aliases = row[11].split(";")

            for raw_alias in aliases:

                alias = Alias.objects.get_or_none(alias=raw_alias)
                if not alias:
                    continue

                vul = alias.vulnerability
                if not vul:
                    continue

                self.add_exploit_references(row[11], row[16], row[1], vul)

                Exploit.objects.update_or_create(
                    vulnerability=vul,
                    data_source="Exploit-DB",
                    defaults={
                        "date_added": row[header.index("date_added")],
                        "description": row[header.index("description")],
                        "known_ransomware_campaign_use": row[header.index("verified")],
                        "source_date_published": row[header.index("date_published")],
                        "exploit_type": row[header.index("type")],
                        "platform": row[header.index("platform")],
                        "source_date_updated": row[header.index("date_updated")],
                        "source_url": row[header.index("source_url")],
                    },
                )

    def add_exploit_references(self, ref_id, direct_url, path, vul):
        url_map = {
            "file_url": f"https://gitlab.com/exploit-database/exploitdb/-/blob/main/{path}",
            "direct_url": direct_url,
        }

        for key, url in url_map.items():
            if url:
                ref, created = VulnerabilityReference.objects.update_or_create(
                    url=url,
                    defaults={
                        "reference_id": ref_id,
                        "reference_type": VulnerabilityReference.EXPLOIT,
                    },
                )

                if created:
                    VulnerabilityRelatedReference.objects.get_or_create(
                        vulnerability=vul,
                        reference=ref,
                    )
