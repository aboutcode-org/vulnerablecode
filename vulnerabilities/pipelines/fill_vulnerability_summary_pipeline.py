#
# Copyright (c) nexB Inc. and others. All rights reserved.
# VulnerableCode is a trademark of nexB Inc.
# SPDX-License-Identifier: Apache-2.0
# See http://www.apache.org/licenses/LICENSE-2.0 for the license text.
# See https://github.com/aboutcode-org/vulnerablecode for support or download.
# See https://aboutcode.org for more information about nexB OSS projects.
#

import logging

from django.db.models import Q

from vulnerabilities.models import Advisory
from vulnerabilities.models import Vulnerability
from vulnerabilities.pipelines import VulnerableCodePipeline


class FillVulnerabilitySummariesPipeline(VulnerableCodePipeline):
    """Pipeline to fill missing vulnerability summaries from advisories."""

    pipeline_id = "fill_vulnerability_summaries"

    @classmethod
    def steps(cls):
        return (cls.fill_missing_summaries,)

    def fill_missing_summaries(self):
        """Find vulnerabilities without summaries and fill them using advisories with the same aliases."""
        vulnerabilities_qs = Vulnerability.objects.filter(summary="").prefetch_related("aliases")
        self.log(
            f"Processing {vulnerabilities_qs.count()} vulnerabilities without summaries",
            level=logging.INFO,
        )
        nvd_importer_advisories = Advisory.objects.filter(
            created_by="nvd_importer", summary__isnull=False
        ).exclude(summary="")
        self.log(
            f"Found {nvd_importer_advisories.count()} advisories from NVD importer",
            level=logging.INFO,
        )

        for vulnerability in vulnerabilities_qs.paginated():
            aliases = vulnerability.aliases.values_list("alias", flat=True)
            # get alias that start with CVE- with filter
            alias = aliases.filter(alias__startswith="CVE-").first()

            # check if the vulnerability has an alias
            if not alias:
                self.log(
                    f"Vulnerability {vulnerability.vulnerability_id} has no alias",
                    level=logging.INFO,
                )
                continue

            # check if the vulnerability has an alias that matches an advisory
            matching_advisories = nvd_importer_advisories.filter(Q(aliases__contains=alias))

            if matching_advisories.exists():
                # Take the first matching advisory with a summary
                best_advisory = matching_advisories.first()
                vulnerability.summary = best_advisory.summary
                vulnerability.save()
                self.log(
                    f"Updated summary for vulnerability {vulnerability.vulnerability_id}",
                    level=logging.INFO,
                )
            else:
                self.log(f"No advisory found for alias {alias}", level=logging.INFO)
