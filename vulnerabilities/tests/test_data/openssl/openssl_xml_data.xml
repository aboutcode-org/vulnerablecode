<security updated="20220315">
  <issue public="20210824">
    <impact severity="Moderate"/>
    <cve name="2021-3712"/>
    <affects base="1.1.1" version="1.1.1"/>
    <affects base="1.1.1" version="1.1.1a"/>
    <affects base="1.1.1" version="1.1.1b"/>
    <affects base="1.1.1" version="1.1.1c"/>
    <affects base="1.1.1" version="1.1.1d"/>
    <affects base="1.1.1" version="1.1.1e"/>
    <affects base="1.1.1" version="1.1.1f"/>
    <affects base="1.1.1" version="1.1.1g"/>
    <affects base="1.1.1" version="1.1.1h"/>
    <affects base="1.1.1" version="1.1.1i"/>
    <affects base="1.1.1" version="1.1.1j"/>
    <affects base="1.1.1" version="1.1.1k"/>
    <affects base="1.0.2" version="1.0.2"/>
    <affects base="1.0.2" version="1.0.2a"/>
    <affects base="1.0.2" version="1.0.2b"/>
    <affects base="1.0.2" version="1.0.2c"/>
    <affects base="1.0.2" version="1.0.2d"/>
    <affects base="1.0.2" version="1.0.2e"/>
    <affects base="1.0.2" version="1.0.2f"/>
    <affects base="1.0.2" version="1.0.2g"/>
    <affects base="1.0.2" version="1.0.2h"/>
    <affects base="1.0.2" version="1.0.2i"/>
    <affects base="1.0.2" version="1.0.2j"/>
    <affects base="1.0.2" version="1.0.2k"/>
    <affects base="1.0.2" version="1.0.2l"/>
    <affects base="1.0.2" version="1.0.2m"/>
    <affects base="1.0.2" version="1.0.2n"/>
    <affects base="1.0.2" version="1.0.2o"/>
    <affects base="1.0.2" version="1.0.2p"/>
    <affects base="1.0.2" version="1.0.2q"/>
    <affects base="1.0.2" version="1.0.2r"/>
    <affects base="1.0.2" version="1.0.2s"/>
    <affects base="1.0.2" version="1.0.2t"/>
    <affects base="1.0.2" version="1.0.2u"/>
    <affects base="1.0.2" version="1.0.2v"/>
    <affects base="1.0.2" version="1.0.2w"/>
    <affects base="1.0.2" version="1.0.2x"/>
    <affects base="1.0.2" version="1.0.2y"/>
    <fixed base="1.1.1" version="1.1.1l" date="20210824">
      <git hash="94d23fcff9b2a7a8368dfe52214d5c2569882c11"/>
    </fixed>
    <fixed base="1.0.2" version="1.0.2za" date="20210824">
      <git hash="ccb0a11145ee72b042d10593a64eaf9e8a55ec12"/>
    </fixed>
    <problemtype>Buffer overflow</problemtype>
    <title>Read buffer overruns processing ASN.1 strings</title>
    <description>
    ASN.1 strings are represented internally within OpenSSL as an ASN1_STRING
    structure which contains a buffer holding the string data and a field holding
    the buffer length. This contrasts with normal C strings which are repesented as
    a buffer for the string data which is terminated with a NUL (0) byte.

    Although not a strict requirement, ASN.1 strings that are parsed using OpenSSL's
    own "d2i" functions (and other similar parsing functions) as well as any string
    whose value has been set with the ASN1_STRING_set() function will additionally
    NUL terminate the byte array in the ASN1_STRING structure.

    However, it is possible for applications to directly construct valid ASN1_STRING
    structures which do not NUL terminate the byte array by directly setting the
    "data" and "length" fields in the ASN1_STRING array. This can also happen by
    using the ASN1_STRING_set0() function.

    Numerous OpenSSL functions that print ASN.1 data have been found to assume that
    the ASN1_STRING byte array will be NUL terminated, even though this is not
    guaranteed for strings that have been directly constructed. Where an application
    requests an ASN.1 structure to be printed, and where that ASN.1 structure
    contains ASN1_STRINGs that have been directly constructed by the application
    without NUL terminating the "data" field, then a read buffer overrun can occur.

    The same thing can also occur during name constraints processing of certificates
    (for example if a certificate has been directly constructed by the application
    instead of loading it via the OpenSSL parsing functions, and the certificate
    contains non NUL terminated ASN1_STRING structures). It can also occur in the
    X509_get1_email(), X509_REQ_get1_email() and X509_get1_ocsp() functions.

    If a malicious actor can cause an application to directly construct an
    ASN1_STRING and then process it through one of the affected OpenSSL functions
    then this issue could be hit. This might result in a crash (causing a Denial of
    Service attack). It could also result in the disclosure of private memory
    contents (such as private keys, or sensitive plaintext).
    </description>
    <advisory url="/news/secadv/20210824.txt"/>
    <reported source="Ingo Schwarze"/>
  </issue>
  <issue public="20191206">
    <impact severity="Low"/>
    <cve name="2019-1551"/>
    <affects base="1.1.1" version="1.1.1"/>
    <affects base="1.1.1" version="1.1.1a"/>
    <affects base="1.1.1" version="1.1.1b"/>
    <affects base="1.1.1" version="1.1.1c"/>
    <affects base="1.1.1" version="1.1.1d"/>
    <affects base="1.0.2" version="1.0.2"/>
    <affects base="1.0.2" version="1.0.2a"/>
    <affects base="1.0.2" version="1.0.2b"/>
    <affects base="1.0.2" version="1.0.2c"/>
    <affects base="1.0.2" version="1.0.2d"/>
    <affects base="1.0.2" version="1.0.2e"/>
    <affects base="1.0.2" version="1.0.2f"/>
    <affects base="1.0.2" version="1.0.2g"/>
    <affects base="1.0.2" version="1.0.2h"/>
    <affects base="1.0.2" version="1.0.2i"/>
    <affects base="1.0.2" version="1.0.2j"/>
    <affects base="1.0.2" version="1.0.2k"/>
    <affects base="1.0.2" version="1.0.2l"/>
    <affects base="1.0.2" version="1.0.2m"/>
    <affects base="1.0.2" version="1.0.2n"/>
    <affects base="1.0.2" version="1.0.2o"/>
    <affects base="1.0.2" version="1.0.2p"/>
    <affects base="1.0.2" version="1.0.2q"/>
    <affects base="1.0.2" version="1.0.2r"/>
    <affects base="1.0.2" version="1.0.2s"/>
    <affects base="1.0.2" version="1.0.2t"/>
    <fixed base="1.1.1" version="1.1.1e" date="20191206">
      <git hash="419102400a2811582a7a3d4a4e317d72e5ce0a8f"/>
    </fixed>
    <fixed base="1.0.2" version="1.0.2u" date="20191220">
      <git hash="f1c5eea8a817075d31e43f5876993c6710238c98"/>
    </fixed>
    <problemtype>Integer overflow bug</problemtype>
    <title>rsaz_512_sqr overflow bug on x86_64</title>
    <description>
      There is an overflow bug in the x64_64 Montgomery squaring procedure used in
      exponentiation with 512-bit moduli. No EC algorithms are affected. Analysis
      suggests that attacks against 2-prime RSA1024, 3-prime RSA1536, and DSA1024 as a
      result of this defect would be very difficult to perform and are not believed
      likely. Attacks against DH512 are considered just feasible. However, for an
      attack the target would have to re-use the DH512 private key, which is not
      recommended anyway. Also applications directly using the low level API
      BN_mod_exp may be affected if they use BN_FLG_CONSTTIME.
    </description>
    <advisory url="/news/secadv/20191206.txt"/>
    <reported source="OSS-Fuzz and Guido Vranken"/>
  </issue>
  <issue public="20090512">
  <cve name="2009-1379"/>
  <advisory url="https://web.archive.org/web/20100824233642/http://rt.openssl.org/Ticket/Display.html?id=1923&amp;user=guest&amp;pass=guest"/>
  <affects base="0.9.8" version="0.9.8"/>
  <affects base="0.9.8" version="0.9.8a"/>
  <affects base="0.9.8" version="0.9.8b"/>
  <affects base="0.9.8" version="0.9.8c"/>
  <affects base="0.9.8" version="0.9.8d"/>
  <affects base="0.9.8" version="0.9.8e"/>
  <affects base="0.9.8" version="0.9.8f"/>
  <affects base="0.9.8" version="0.9.8g"/>
  <affects base="0.9.8" version="0.9.8h"/>
  <affects base="0.9.8" version="0.9.8i"/>
  <affects base="0.9.8" version="0.9.8j"/>
  <affects base="0.9.8" version="0.9.8k"/>
  <affects base="0.9.8" version="0.9.8l"/>
  <fixed base="0.9.8" version="0.9.8m" date="20100120">
    <git hash="561cbe567846a376153bea7f1f2d061e78029c2d"/>
  </fixed>
  <reported source="Daniel Mentz, Robin Seggelmann"/>
  <description>
    Use-after-free vulnerability in the dtls1_retrieve_buffered_fragment
    function could cause a client accessing a malicious DTLS server to
    crash.
  </description>
  </issue>
  <issue public="20190730">
    <impact severity="Low"/>
    <cve name="2019-1552"/>
    <affects base="1.1.1" version="1.1.1"/>
    <affects base="1.1.1" version="1.1.1a"/>
    <affects base="1.1.1" version="1.1.1b"/>
    <affects base="1.1.1" version="1.1.1c"/>
    <affects base="1.1.0" version="1.1.0"/>
    <affects base="1.1.0" version="1.1.0a"/>
    <affects base="1.1.0" version="1.1.0b"/>
    <affects base="1.1.0" version="1.1.0c"/>
    <affects base="1.1.0" version="1.1.0d"/>
    <affects base="1.1.0" version="1.1.0e"/>
    <affects base="1.1.0" version="1.1.0f"/>
    <affects base="1.1.0" version="1.1.0g"/>
    <affects base="1.1.0" version="1.1.0h"/>
    <affects base="1.1.0" version="1.1.0i"/>
    <affects base="1.1.0" version="1.1.0j"/>
    <affects base="1.1.0" version="1.1.0k"/>
    <affects base="1.0.2" version="1.0.2"/>
    <affects base="1.0.2" version="1.0.2a"/>
    <affects base="1.0.2" version="1.0.2b"/>
    <affects base="1.0.2" version="1.0.2c"/>
    <affects base="1.0.2" version="1.0.2d"/>
    <affects base="1.0.2" version="1.0.2e"/>
    <affects base="1.0.2" version="1.0.2f"/>
    <affects base="1.0.2" version="1.0.2g"/>
    <affects base="1.0.2" version="1.0.2h"/>
    <affects base="1.0.2" version="1.0.2i"/>
    <affects base="1.0.2" version="1.0.2j"/>
    <affects base="1.0.2" version="1.0.2k"/>
    <affects base="1.0.2" version="1.0.2l"/>
    <affects base="1.0.2" version="1.0.2m"/>
    <affects base="1.0.2" version="1.0.2n"/>
    <affects base="1.0.2" version="1.0.2o"/>
    <affects base="1.0.2" version="1.0.2p"/>
    <affects base="1.0.2" version="1.0.2q"/>
    <affects base="1.0.2" version="1.0.2r"/>
    <affects base="1.0.2" version="1.0.2s"/>
    <fixed base="1.1.1" version="1.1.1d" date="20190706">
      <git hash="54aa9d51b09d67e90db443f682cface795f5af9e"/>
    </fixed>
    <fixed base="1.1.0" version="1.1.0l" date="20190727">
      <git hash="e32bc855a81a2d48d215c506bdeb4f598045f7e9"/>
      <git hash="b15a19c148384e73338aa7c5b12652138e35ed28"/>
    </fixed>
    <fixed base="1.0.2" version="1.0.2t" date="20190725">
      <git hash="d333ebaf9c77332754a9d5e111e2f53e1de54fdd"/>
    </fixed>
    <problemtype>Insecure defaults</problemtype>
    <title>Windows builds with insecure path defaults</title>
    <description> OpenSSL has internal defaults for a directory tree where it can find a configuration file as well as certificates used for verification in TLS. This directory is most commonly referred to as OPENSSLDIR, and is configurable with the --prefix / --openssldir configuration options. For OpenSSL versions 1.1.0 and 1.1.1, the mingw configuration targets assume that resulting programs and libraries are installed in a Unix-like environment and the default prefix for program installation as well as for OPENSSLDIR should be '/usr/local'. However, mingw programs are Windows programs, and as such, find themselves looking at sub-directories of 'C:/usr/local', which may be world writable, which enables untrusted users to modify OpenSSL's default configuration, insert CA certificates, modify (or even replace) existing engine modules, etc. For OpenSSL 1.0.2, '/usr/local/ssl' is used as default for OPENSSLDIR on all Unix and Windows targets, including Visual C builds. However, some build instructions for the diverse Windows targets on 1.0.2 encourage you to specify your own --prefix. OpenSSL versions 1.1.1, 1.1.0 and 1.0.2 are affected by this issue. Due to the limited scope of affected deployments this has been assessed as low severity and therefore we are not creating new releases at this time. </description>
    <advisory url="/news/secadv/20190730.txt"/>
    <reported source="Rich Mirch"/>
  </issue>
</security>