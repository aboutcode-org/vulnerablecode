import os
from datetime import datetime
from unittest import mock

import pytest

from vulnerabilities.importers.nvd import NVDImporter
from vulnerabilities.improvers.vulnerability_status import VulnerabilityStatusImprover
from vulnerabilities.improvers.vulnerability_status import get_status_from_api
from vulnerabilities.models import Advisory
from vulnerabilities.models import Alias
from vulnerabilities.models import Vulnerability
from vulnerabilities.models import VulnerabilityStatusType

BASE_DIR = os.path.dirname(os.path.abspath(__file__))


TEST_DATA = os.path.join(
    BASE_DIR,
    "test_data/vulnerability_status_improver",
)


@pytest.mark.django_db(transaction=True)
def test_interesting_advisories():
    Advisory.objects.create(
        aliases=["CVE-1"],
        created_by=NVDImporter.qualified_name,
        summary="1",
        date_collected=datetime.now(),
    )
    Advisory.objects.create(
        aliases=["CVE-1"],
        created_by=NVDImporter.qualified_name,
        summary="2",
        date_collected=datetime.now(),
    )
    advs = VulnerabilityStatusImprover().interesting_advisories
    assert len(list(advs)) == 1


@mock.patch("vulnerabilities.utils.fetch_response")
def test_get_status_from_api(mock_response):
    response = os.path.join(TEST_DATA, f"CVE-2023-35866.json")
    mock_response.return_value = response
    status = get_status_from_api(cve_id="CVE-2023-35866")
    assert status == VulnerabilityStatusType.DISPUTED


@pytest.mark.django_db(transaction=True)
@mock.patch("vulnerabilities.utils.fetch_response")
def test_improver_end_to_end(mock_response):
    response = os.path.join(TEST_DATA, f"CVE-2023-35866.json")
    mock_response.return_value = response
    adv = Advisory.objects.create(
        aliases=["CVE-2023-35866"],
        created_by=NVDImporter.qualified_name,
        summary="1",
        date_collected=datetime.now(),
    )
    v1 = Vulnerability.objects.create(summary="test")
    Alias.objects.create(alias="CVE-2023-35866", vulnerability=v1)
    VulnerabilityStatusImprover().get_inferences(advisory_data=adv)
    v1 = Vulnerability.objects.get(summary="test")
    assert v1.status == VulnerabilityStatusType.DISPUTED
